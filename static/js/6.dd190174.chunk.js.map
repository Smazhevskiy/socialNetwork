{"version":3,"sources":["utils/validate/validators.ts","components/common/formsControl/FormsControl.tsx","components/common/formsControl/FormsControl.module.css","pages/login/loginPage.module.css","pages/login/loginPage.tsx"],"names":["required","value","undefined","maxLengthCreator","symbalLength","length","Textarea","input","meta","props","hasError","touched","error","className","styles","formControl","children","Input","module","exports","LoginForm","handleSubmit","onSubmit","placeholder","component","name","validate","type","style","display","alignItems","htmlFor","formSummaryError","LoginReduxForm","reduxForm","form","connect","state","isAuth","auth","login","to","loginPage","loginForm","formData","email","password","rememberMe"],"mappings":"wGAEA,oEAAO,IAAMA,EAAW,SAACC,GACvB,OAASA,OAAOC,EAAY,gBAGjBC,EAAmB,SAACC,GAC7B,OAAO,SAACH,GACJ,OAAIA,EAAMI,OAASD,EACT,iBAAN,OAAwBA,EAAxB,iBAEA,K,yJCFCE,EAAqD,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,MAAMC,EAAmB,EAAnBA,KAAQC,EAAW,gCACnFC,EAAWF,EAAKG,SAAWH,EAAKI,MAEtC,OACI,sBAAKC,UAAS,UAAKC,IAAOC,YAAZ,cAA6BL,EAAWI,IAAOF,MAAQ,GAAvD,KAAd,UACI,8BACI,oDAAcL,GAAWE,MAE5BC,GAAY,+BAAOF,EAAKI,QACxBH,EAAMO,aAINC,EAAkD,SAAC,GAA2B,IAA1BV,EAAyB,EAAzBA,MAAMC,EAAmB,EAAnBA,KAAQC,EAAW,gCAChFC,EAAWF,EAAKG,SAAWH,EAAKI,MAEtC,OACI,sBAAKC,UAAS,UAAKC,IAAOC,YAAZ,cAA6BL,EAAWI,IAAOF,MAAQ,GAAvD,KAAd,UACI,8BACI,iDAAWL,GAAWE,MAEzBC,GAAY,+BAAOF,EAAKI,a,oBC7BrCM,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,8B,oBCA1ED,EAAOC,QAAU,CAAC,UAAY,6BAA6B,UAAY,6BAA6B,iBAAmB,sC,iCCDvH,8IA0BaC,EAAiD,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,aAAcT,EAAW,EAAXA,MAC1E,OACI,uBAAMU,SAAUD,EAAhB,UACI,cAAC,IAAD,CAAOE,YAAa,QAASC,UAAWP,IAAOQ,KAAM,QAASC,SAAU,CAAC1B,OACzE,cAAC,IAAD,CAAO2B,KAAM,WAAYJ,YAAa,WAAYC,UAAWP,IAAOQ,KAAM,WACnEC,SAAU,CAAC1B,OAClB,sBAAK4B,MAAO,CAACC,QAAS,OAAQC,WAAY,UAA1C,UACI,cAAC,IAAD,CAAOH,KAAK,WAAWH,UAAW,QAASC,KAAM,eACjD,uBAAOM,QAAQ,iBAAf,4BAEHnB,GAAS,qBAAKC,UAAWe,IAAMI,iBAAtB,SAAyCpB,IACnD,8BACI,iDA2BVqB,EAAiBC,YAAwB,CAC3CC,KAAM,SADaD,CAEpBd,GAMYgB,uBAHS,SAACC,GAAD,MAAmD,CAACC,OAAQD,EAAME,KAAKD,UAGvD,CAACE,WAA1BJ,EA5Bc,SAAC3B,GAI1B,OAAIA,EAAM6B,OACC,cAAC,IAAD,CAAUG,GAAE,aAGnB,qCACI,uCACA,qBAAK5B,UAAWe,IAAMc,UAAtB,SACI,qBAAK7B,UAAWe,IAAMe,UAAtB,SACI,cAACV,EAAD,CAAgBX,SAXf,SAACsB,GACdnC,EAAM+B,MAAMI,EAASC,MAAOD,EAASE,SAAUF,EAASG,YAAY","file":"static/js/6.dd190174.chunk.js","sourcesContent":["\n\nexport const required = (value:string) => {\n  return   value? undefined : 'field is req'\n}\n\nexport const maxLengthCreator = (symbalLength:number) => {\n    return (value: string) => {\n        if (value.length > symbalLength) {\n            return `max length is ${symbalLength} symbols`\n        } else {\n            return undefined\n        }\n    }\n}\n","import React, {FC} from 'react'\nimport { WrappedFieldProps } from 'redux-form'\nimport styles from './FormsControl.module.css'\n\ninterface CustomFieldProps {\n    type?: string;\n}\n\n\nexport const Textarea:FC<WrappedFieldProps & CustomFieldProps > = ({input,meta,...props}) => {\n    const hasError = meta.touched && meta.error\n\n    return (\n        <div className={`${styles.formControl} + ${hasError ? styles.error : \"\"} `}>\n            <div>\n                <textarea {...input} {...props}/>\n            </div>\n            {hasError && <span>{meta.error}</span>}\n            {props.children}\n        </div>\n    )\n}\nexport const Input:FC<WrappedFieldProps & CustomFieldProps > = ({input,meta,...props}) => {\n    const hasError = meta.touched && meta.error\n\n    return (\n        <div className={`${styles.formControl} + ${hasError ? styles.error : \"\"} `}>\n            <div>\n                <input {...input} {...props}/>\n            </div>\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__V2fM1\",\"error\":\"FormsControl_error__JUf5o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"loginPage_loginPage__2M_t6\",\"loginForm\":\"loginPage_loginForm__19DaK\",\"formSummaryError\":\"loginPage_formSummaryError__23PrX\"};","import React, {FC} from 'react'\nimport style from './loginPage.module.css'\nimport {connect} from \"react-redux\";\nimport {login} from \"../../redux/auth-reducer\";\nimport {required} from \"../../utils/validate/validators\";\nimport {reduxForm, Field, InjectedFormProps} from 'redux-form';\nimport {Input} from '../../components/common/formsControl/FormsControl';\nimport {AppRootStateType} from \"../../redux/redux-store\";\nimport {Redirect} from \"react-router-dom\";\n\ninterface mapDispatchToProps {\n    login: (email: string, password: string, rememberMe: boolean, captcha: boolean) => void\n}\n\ninterface MapStateToPropsType {\n    isAuth: boolean\n}\n\ntype propsType = mapDispatchToProps & MapStateToPropsType\n\ninterface formDataType {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\nexport const LoginForm: FC<InjectedFormProps<formDataType>> = ({handleSubmit, error}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <Field placeholder={'email'} component={Input} name={'email'} validate={[required]}/>\n            <Field type={'password'} placeholder={'password'} component={Input} name={'password'}\n                   validate={[required]}/>\n            <div style={{display: \"flex\", alignItems: \"center\"}}>\n                <Field type=\"checkbox\" component={'input'} name={'rememberMe'}/>\n                <label htmlFor=\"{'rememberMe'}\">remember me</label>\n            </div>\n            {error && <div className={style.formSummaryError}>{error}</div>}\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\n\nconst Login: FC<propsType> = (props: any) => {\n    const onSubmit = (formData: formDataType) => {\n        props.login(formData.email, formData.password, formData.rememberMe, false)\n    }\n    if (props.isAuth) {\n        return <Redirect to={`/profile`}/>\n    }\n    return (\n        <>\n            <h1>Login</h1>\n            <div className={style.loginPage}>\n                <div className={style.loginForm}>\n                    <LoginReduxForm onSubmit={onSubmit}/>\n                </div>\n            </div>\n        </>\n    )\n}\n\n\nconst LoginReduxForm = reduxForm<formDataType>({\n    form: 'login'\n})(LoginForm)\n\n\nconst MapStateToProps = (state: AppRootStateType): MapStateToPropsType => ({isAuth: state.auth.isAuth})\n\n\nexport default connect(MapStateToProps, {login})(Login)"],"sourceRoot":""}