{"version":3,"sources":["utils/validate/validators.ts","components/common/formsControl/FormsControl.tsx","components/common/formsControl/FormsControl.module.css","pages/dialogs/Dialogs.module.css","pages/dialogs/DialogItem/DialogItem.module.css","pages/dialogs/DialogItem/DialogsItem.tsx","pages/dialogs/Message/Message.tsx","pages/dialogs/SendMessage.tsx","pages/dialogs/Dialogs.tsx","Hoc/withAuthRedirect.tsx","pages/dialogs/DialogsContainer.ts"],"names":["required","value","undefined","maxLengthCreator","symbalLength","length","Textarea","input","meta","props","hasError","touched","error","className","styles","formControl","children","Input","module","exports","DialogItem","path","id","classes","dialog","active","grid","to","src","img","alt","dialogAvatar","dialogText","activeClassName","dialogUsername","name","Message","message","maxLengthCreator100","Dialogs","React","memo","dialogsPage","sendMessage","dialogsElements","dialogs","map","messagesElements","messages","dialogsHeader","dialogItems","DialogsReduxForm","onSubmit","values","sendNewMessage","reduxForm","form","handleSubmit","Field","placeholder","component","validate","mstp","state","isAuth","auth","compose","connect","dispatch","messageText","sendMessageCreator","Component","rest"],"mappings":"wGAEA,oEAAO,IAAMA,EAAW,SAACC,GACvB,OAASA,OAAOC,EAAY,gBAGjBC,EAAmB,SAACC,GAC7B,OAAO,SAACH,GACJ,OAAIA,EAAMI,OAASD,EACT,iBAAN,OAAwBA,EAAxB,iBAEA,K,yJCFCE,EAAqD,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,MAAMC,EAAmB,EAAnBA,KAAQC,EAAW,gCACnFC,EAAWF,EAAKG,SAAWH,EAAKI,MAEtC,OACI,sBAAKC,UAAS,UAAKC,IAAOC,YAAZ,cAA6BL,EAAWI,IAAOF,MAAQ,GAAvD,KAAd,UACI,8BACI,oDAAcL,GAAWE,MAE5BC,GAAY,+BAAOF,EAAKI,QACxBH,EAAMO,aAINC,EAAkD,SAAC,GAA2B,IAA1BV,EAAyB,EAAzBA,MAAMC,EAAmB,EAAnBA,KAAQC,EAAW,gCAChFC,EAAWF,EAAKG,SAAWH,EAAKI,MAEtC,OACI,sBAAKC,UAAS,UAAKC,IAAOC,YAAZ,cAA6BL,EAAWI,IAAOF,MAAQ,GAAvD,KAAd,UACI,8BACI,iDAAWL,GAAWE,MAEzBC,GAAY,+BAAOF,EAAKI,a,oBC7BrCM,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,8B,oBCA1ED,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,YAAc,6BAA6B,SAAW,0BAA0B,QAAU,2B,oBCA9LD,EAAOC,QAAU,CAAC,KAAO,yBAAyB,OAAS,2BAA2B,eAAiB,mCAAmC,OAAS,2BAA2B,aAAe,iCAAiC,WAAa,iC,+HCqB5NC,EAX8B,SAACX,GAC1C,IAAIY,EAAO,YAAcZ,EAAMa,GAC/B,OACI,sBAAKT,UAAS,UAAKU,IAAQC,OAAb,YAAuBD,IAAQE,OAA/B,YAAyCF,IAAQG,MAA/D,UACI,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoB,qBAAKO,IAAKnB,EAAMoB,IAAKC,IAAI,KAAKjB,UAAWU,IAAQQ,iBACrE,qBAAKlB,UAAWU,IAAQS,WAAxB,uBACA,cAAC,IAAD,CAASL,GAAIN,EAAMY,gBAAiBV,IAAQE,OAASZ,UAAWU,IAAQW,eAAxE,SAAyFzB,EAAM0B,WCF5FC,EANwB,SAAC3B,GACpC,OACI,qBAAKI,UAAWU,IAAQc,QAAxB,SAAmC5B,EAAM4B,W,oCCL3CC,EAAqBnC,YAAiB,KCEtCoC,EAAsCC,IAAMC,MAAK,YAAiC,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,YAC9DC,EAAkB,YAAIF,EAAYG,SACjCC,KAAI,SAAAtB,GAAM,OAAI,cAAC,EAAD,CAA4BW,KAAMX,EAAOW,KAAMb,GAAIE,EAAOF,GAAIO,IAAKL,EAAOK,KAAzDL,EAAOF,OACvCyB,EAAmB,YAAIL,EAAYM,UAClCF,KAAI,SAAAT,GAAO,OAAI,cAAC,EAAD,CAA0BA,QAASA,EAAQA,QAASf,GAAIe,EAAQf,IAAlDe,EAAQf,OAM1C,OACI,sBAAKT,UAAWU,IAAQsB,QAAxB,UACI,oBAAIhC,UAAWU,IAAQ0B,cAAvB,sBACA,qBAAKpC,UAAWU,IAAQ2B,YAAxB,SACKN,IAEL,sBAAK/B,UAAWU,IAAQyB,SAAxB,UACI,8BAAMD,IACN,cAACI,EAAD,CAAkBC,SAZR,SAACC,GACnBV,EAAYU,EAAOC,4BAqBdH,EAAmBI,YAAmE,CAC/FC,KAAM,yBADsBD,ED7B2E,SAAC9C,GAExG,OACI,uBAAM2C,SAAU3C,EAAMgD,aAAtB,UACI,cAACC,EAAA,EAAD,CACIC,YAAa,cACbC,UAAWtD,IACX6B,KAAM,iBACN0B,SAAU,CAAC7D,IAASsC,GAJxB,eAMA,gDCsBGC,I,uCC9BTuB,EAAO,SAACC,GACV,MAAO,CACHC,OAAOD,EAAME,KAAKD,SCkBXE,4BACXC,aAfoB,SAACJ,GACrB,MAAO,CACHrB,YAAaqB,EAAMrB,gBAGA,SAAC0B,GACxB,MAAO,CACHzB,YAAa,SAAC0B,GACVD,EAASE,YAAmBD,UDRjC,SAA8BE,GAUjC,OAFiCJ,YAAQL,EAARK,EAPP,SAAC1D,GACAA,EAAlBuD,OAD6C,IACnCQ,EADkC,YAC1B/D,EAD0B,YAEjD,OAAKA,EAAMuD,OAGJ,cAACO,EAAD,eAAeC,IAFX,cAAC,IAAD,CAAU7C,GAAI,gBCUlBuC,CAGb3B","file":"static/js/5.47f99a49.chunk.js","sourcesContent":["\n\nexport const required = (value:string) => {\n  return   value? undefined : 'field is req'\n}\n\nexport const maxLengthCreator = (symbalLength:number) => {\n    return (value: string) => {\n        if (value.length > symbalLength) {\n            return `max length is ${symbalLength} symbols`\n        } else {\n            return undefined\n        }\n    }\n}\n","import React, {FC} from 'react'\nimport { WrappedFieldProps } from 'redux-form'\nimport styles from './FormsControl.module.css'\n\ninterface CustomFieldProps {\n    type?: string;\n}\n\n\nexport const Textarea:FC<WrappedFieldProps & CustomFieldProps > = ({input,meta,...props}) => {\n    const hasError = meta.touched && meta.error\n\n    return (\n        <div className={`${styles.formControl} + ${hasError ? styles.error : \"\"} `}>\n            <div>\n                <textarea {...input} {...props}/>\n            </div>\n            {hasError && <span>{meta.error}</span>}\n            {props.children}\n        </div>\n    )\n}\nexport const Input:FC<WrappedFieldProps & CustomFieldProps > = ({input,meta,...props}) => {\n    const hasError = meta.touched && meta.error\n\n    return (\n        <div className={`${styles.formControl} + ${hasError ? styles.error : \"\"} `}>\n            <div>\n                <input {...input} {...props}/>\n            </div>\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__V2fM1\",\"error\":\"FormsControl_error__JUf5o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3NS-S\",\"dialogsHeader\":\"Dialogs_dialogsHeader__1-FJn\",\"dialogItems\":\"Dialogs_dialogItems__330fM\",\"messages\":\"Dialogs_messages__FramD\",\"message\":\"Dialogs_message__3Cxsz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"DialogItem_grid___5GMf\",\"dialog\":\"DialogItem_dialog__ospDw\",\"dialogUsername\":\"DialogItem_dialogUsername__3UNDX\",\"active\":\"DialogItem_active__1Lzdv\",\"dialogAvatar\":\"DialogItem_dialogAvatar__3-6Lg\",\"dialogText\":\"DialogItem_dialogText__3XH3y\"};","import React from 'react'\nimport {NavLink} from 'react-router-dom';\n\n\nimport classes from \"./DialogItem.module.css\";\n\ntype DialogItemType = {\n    id:number\n    img:string\n    name:string\n}\nconst DialogItem: React.FC<DialogItemType> = (props) => {\n    let path = '/dialogs/' + props.id\n    return (\n        <div className={`${classes.dialog} ${classes.active} ${classes.grid}`} >\n            <NavLink to={path} ><img src={props.img} alt=\"aa\" className={classes.dialogAvatar}/></NavLink>\n            <div className={classes.dialogText}>some text</div>\n            <NavLink to={path} activeClassName={classes.active}  className={classes.dialogUsername}>{props.name}</NavLink>\n        </div>\n    )\n}\n\nexport default DialogItem","import React from 'react'\nimport classes from '../Dialogs.module.css';\n\n\ntype messageType = {\n    id:number\n    message:string|undefined\n}\n\nconst Message : React.FC<messageType>= (props) => {\n    return (\n        <div className={classes.message} >{props.message}</div>\n    )\n}\n\nexport default Message","import React, {FC} from 'react'\nimport {Field, InjectedFormProps} from \"redux-form\";\nimport {sendMessageExtendsFormDataType, sendMessageFormDataType} from \"./Dialogs\";\nimport {Textarea} from \"../../components/common/formsControl/FormsControl\";\nimport {maxLengthCreator, required} from \"../../utils/validate/validators\";\n\nconst maxLengthCreator100 =maxLengthCreator(100)\nexport const SendMessage: FC<InjectedFormProps<sendMessageFormDataType> & sendMessageExtendsFormDataType>= (props) => {\n\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field\n                placeholder={'create post'}\n                component={Textarea}\n                name={'sendNewMessage'}\n                validate={[required,maxLengthCreator100]}\n            > </Field>\n            <button >send</button>\n        </form>\n    )\n}\n","import React from 'react'\nimport classes from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogsItem\";\nimport Message from \"./Message/Message\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {reduxForm} from \"redux-form\";\nimport {SendMessage} from './SendMessage';\n\nconst Dialogs: React.FC<DialogsPropsType> = React.memo(({dialogsPage, sendMessage}) => {\n    let dialogsElements = [...dialogsPage.dialogs]\n        .map(dialog => <DialogItem key={dialog.id} name={dialog.name} id={dialog.id} img={dialog.img}/>)\n    let messagesElements = [...dialogsPage.messages]\n        .map(message => <Message key={message.id} message={message.message} id={message.id}/>)\n\n    const addNewMessage = (values: sendMessageFormDataType) => {\n        sendMessage(values.sendNewMessage)\n    }\n\n    return (\n        <div className={classes.dialogs}>\n            <h2 className={classes.dialogsHeader}> Dialogs</h2>\n            <div className={classes.dialogItems}>\n                {dialogsElements}\n            </div>\n            <div className={classes.messages}>\n                <div>{messagesElements}</div>\n                <DialogsReduxForm onSubmit={addNewMessage}/>\n            </div>\n        </div>\n    )\n})\nexport type sendMessageFormDataType = {\n    sendNewMessage: string\n}\nexport type sendMessageExtendsFormDataType = {}\n\nexport const DialogsReduxForm = reduxForm<sendMessageFormDataType, sendMessageExtendsFormDataType>({\n    form: 'dialogsAddMessageForm'\n})(SendMessage)\nexport default Dialogs","import React, {ComponentType} from 'react'\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppRootStateType} from \"../redux/redux-store\";\n\ntype mapStateToProps = {\n    isAuth:boolean\n}\n\nconst mstp = (state:AppRootStateType) : mapStateToProps => {\n    return {\n        isAuth:state.auth.isAuth\n    }\n}\n\nexport function WithAuthRedirect <T>(Component:ComponentType<T>)  {\n    const RedirectComponent = (props:mapStateToProps) => {\n        let {isAuth,...rest} = props\n        if (!props.isAuth){\n            return <Redirect to={'/login'}/>\n        }\n        return <Component {...rest as T}/>\n    }\n    let ConnectedRedirectComponent = connect(mstp)(RedirectComponent)\n\n    return ConnectedRedirectComponent\n}","import {DialogsPageStateType, sendMessageCreator} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {AppRootStateType} from \"../../redux/redux-store\";\nimport {compose, Dispatch} from 'redux';\nimport {WithAuthRedirect} from \"../../Hoc/withAuthRedirect\";\n\ntype MapStatePropsType = {\n    dialogsPage: DialogsPageStateType\n}\ntype MapDispatchToProps = {\n    sendMessage: (messageText:string) => void\n}\nexport type DialogsPropsType = MapStatePropsType & MapDispatchToProps\n\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\n    return {\n        sendMessage: (messageText:string) => {\n            dispatch(sendMessageCreator(messageText))\n        },\n    }\n}\n\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    WithAuthRedirect\n)(Dialogs)"],"sourceRoot":""}