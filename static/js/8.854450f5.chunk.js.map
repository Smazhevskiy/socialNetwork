{"version":3,"sources":["pages/users/Users.tsx","redux/users-selectors.ts","pages/users/UsersContainer.tsx"],"names":["Users","React","memo","props","users","currentPage","pageSize","totalUsersCount","onPageChanged","followingInProgress","follow","unfollow","pagesCount","Math","ceil","pages","i","push","handleChangePage","e","curPage","Pagination","defaultPage","page","onChange","count","color","shape","map","u","User","user","getUsersSelector","createSelector","state","usersPage","getPageSizeSelector","getTotalUsersCountSelector","getCurrentPageSelector","getIsFetchingSelector","isFetching","getFollowingInProgressSelector","UsersContainer","pageNumber","getUsers","this","Preloader","Component","compose","connect","setCurrentPage","requestUsers"],"mappings":"0PAmBaA,EAA4BC,IAAMC,MAAK,SAACC,GAcjD,IAd4D,IAExDC,EAQAD,EARAC,MACAC,EAOAF,EAPAE,YACAC,EAMAH,EANAG,SACAC,EAKAJ,EALAI,gBACAC,EAIAL,EAJAK,cACAC,EAGAN,EAHAM,oBACAC,EAEAP,EAFAO,OACAC,EACAR,EADAQ,SAGAC,EAAaC,KAAKC,KAAKP,EAAkBD,GACzCS,EAAQ,GACHC,EAAI,EAAGA,GAAKJ,EAAYI,IAC7BD,EAAME,KAAKD,GAGf,IAAME,EAAmB,SAACC,EAAyBC,GAC/CZ,EAAcY,IAGlB,OACI,gCACI,cAACC,EAAA,EAAD,CAAYC,YAAa,EAAGC,KAAMlB,EAAamB,SAAUN,EAAkBO,MAAOb,EACtEc,MAAO,YACPC,MAAM,YAKlB,8BAEQvB,EAAMwB,KAAI,SAAAC,GAAC,OAAI,cAACC,EAAA,EAAD,CACXC,KAAMF,EACNpB,oBAAqBA,EACrBC,OAAQA,EACRC,SAAUA,SAMtB,cAACU,EAAA,EAAD,CAAYG,SAAUN,EAAkBO,MAAOb,EAAYc,MAAO,YAAaC,MAAM,kB,yBCrDpFK,EAAmBC,aALf,SAACC,GACd,OAAOA,EAAMC,UAAU/B,SAI8B,SAACA,GACtD,OAAOA,KAGEgC,EAAsB,SAACF,GAChC,OAAOA,EAAMC,UAAU7B,UAGd+B,EAA6B,SAACH,GACvC,OAAOA,EAAMC,UAAU5B,iBAGd+B,EAAyB,SAACJ,GACnC,OAAOA,EAAMC,UAAU9B,aAGdkC,EAAwB,SAACL,GAClC,OAAOA,EAAMC,UAAUK,YAGdC,EAAiC,SAACP,GAC3C,OAAOA,EAAMC,UAAU1B,qBCQdiC,EAAb,4MAKIlC,cAAgB,SAACmC,GACb,EAAKxC,MAAMyC,SAASD,EAAY,EAAKxC,MAAMG,WANnD,uDACI,WACIuC,KAAK1C,MAAMyC,SAASC,KAAK1C,MAAME,YAAawC,KAAK1C,MAAMG,YAF/D,oBASI,WACI,OAAO,qCACFuC,KAAK1C,MAAMqC,YACZ,cAACM,EAAA,EAAD,IACA,cAAC9C,EAAD,CACIO,gBAAiBsC,KAAK1C,MAAMI,gBAC5BD,SAAUuC,KAAK1C,MAAMG,SACrBD,YAAawC,KAAK1C,MAAME,YACxBG,cAAeqC,KAAKrC,cACpBJ,MAAOyC,KAAK1C,MAAMC,MAClBM,OAAQmC,KAAK1C,MAAMO,OACnBC,SAAUkC,KAAK1C,MAAMQ,SACrBF,oBAAqBoC,KAAK1C,MAAMM,6BArBhD,GAAoCR,IAAM8C,WAuC3BC,4BACXC,aAboB,SAACf,GACrB,MAAO,CACH9B,MAAO4B,EAAiBE,GACxB5B,SAAU8B,EAAoBF,GAC9B3B,gBAAiB8B,EAA2BH,GAC5C7B,YAAaiC,EAAuBJ,GACpCM,WAAYD,EAAsBL,GAClCzB,oBAAqBgC,EAA+BP,MAOpD,CACIgB,mBACAN,SAAUO,IACVzC,WACAC,eANGqC,CAQbN","file":"static/js/8.854450f5.chunk.js","sourcesContent":["import React, {ChangeEvent, FC} from \"react\";\nimport {UserType} from \"../../dal/api\";\nimport Pagination from '@material-ui/lab/Pagination';\nimport {Paginator} from \"./Paginator\";\nimport {User} from \"./User\";\n\n\ntype usersPropsType = {\n    totalUsersCount: number\n    currentPage: number\n    onPageChanged: (pageNumber: number) => void\n    users: UserType[]\n    pageSize: number\n    followingInProgress: number[]\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n}\n\n\nexport const Users: FC<usersPropsType> = React.memo((props) => {\n    const {\n        users,\n        currentPage,\n        pageSize,\n        totalUsersCount,\n        onPageChanged,\n        followingInProgress,\n        follow,\n        unfollow,\n    } = props\n\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)\n    let pages = []\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n\n    const handleChangePage = (e: ChangeEvent<unknown>, curPage: number) => {\n        onPageChanged(curPage)\n    }\n\n    return (\n        <div>\n            <Pagination defaultPage={1} page={currentPage} onChange={handleChangePage} count={pagesCount}\n                        color={'secondary'}\n                        shape=\"rounded\"\n            />\n            {/*<Paginator totalUsersCount={totalUsersCount} pageSize={pageSize} currentPage={currentPage}*/}\n            {/*           onPageChanged={onPageChanged}*/}\n            {/*/>*/}\n            <div>\n                {\n                    users.map(u => <User\n                        user={u}\n                        followingInProgress={followingInProgress}\n                        follow={follow}\n                        unfollow={unfollow}\n                    />)\n                }\n            </div>\n\n\n            <Pagination onChange={handleChangePage} count={pagesCount} color={'secondary'} shape=\"rounded\"/>\n        </div>\n    )\n\n\n});","import {AppRootStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\n\r\nconst getUsers = (state: AppRootStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\n\r\nexport const getUsersSelector = createSelector(getUsers, (users) => {\r\n    return users\r\n})\r\n\r\nexport const getPageSizeSelector = (state: AppRootStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCountSelector = (state: AppRootStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPageSelector = (state: AppRootStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetchingSelector = (state: AppRootStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgressSelector = (state: AppRootStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\n\r\n\r\n","import {connect} from \"react-redux\";\nimport {AppRootStateType} from \"../../redux/redux-store\";\nimport {\n    follow,\n    requestUsers,\n    setCurrentPage,\n    unfollow,\n} from \"../../redux/users-reducer\";\nimport React from \"react\";\nimport {Users} from \"./Users\";\nimport {Preloader} from \"../../components/common/Preloader/Preloader\";\nimport {compose} from \"redux\";\nimport {UserType} from \"../../dal/api\";\nimport {\n    getCurrentPageSelector,\n    getFollowingInProgressSelector,\n    getIsFetchingSelector,\n    getPageSizeSelector,\n    getTotalUsersCountSelector,\n    getUsersSelector\n} from \"../../redux/users-selectors\";\n\ntype MapStatePropsType = {\n    users: UserType[]\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n    followingInProgress: number[]\n}\ntype MapDispatchToProps = {\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n    setCurrentPage: (pageNumber: number) => void\n    getUsers: (currentPage: number, pageSize: number) => void\n}\nexport type UsersApiComponentPropsType = MapStatePropsType & MapDispatchToProps\n\nexport class UsersContainer extends React.Component<UsersApiComponentPropsType> {\n    componentDidMount() {\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        this.props.getUsers(pageNumber, this.props.pageSize)\n    }\n\n    render() {\n        return <>\n            {this.props.isFetching &&\n            <Preloader/>}\n            <Users\n                totalUsersCount={this.props.totalUsersCount}\n                pageSize={this.props.pageSize}\n                currentPage={this.props.currentPage}\n                onPageChanged={this.onPageChanged}\n                users={this.props.users}\n                follow={this.props.follow}\n                unfollow={this.props.unfollow}\n                followingInProgress={this.props.followingInProgress}\n            />\n        </>\n    }\n}\n\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\n    return {\n        users: getUsersSelector(state),\n        pageSize: getPageSizeSelector(state),\n        totalUsersCount: getTotalUsersCountSelector(state),\n        currentPage: getCurrentPageSelector(state),\n        isFetching: getIsFetchingSelector(state),\n        followingInProgress: getFollowingInProgressSelector(state),\n\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps,\n        {\n            setCurrentPage,\n            getUsers: requestUsers,\n            follow,\n            unfollow,\n        })\n)(UsersContainer)\n\n\n// const mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\n//     return {\n//         users: state.usersPage.users,\n//         pageSize: state.usersPage.pageSize,\n//         totalUsersCount: state.usersPage.totalUsersCount,\n//         currentPage: state.usersPage.currentPage,\n//         isFetching: state.usersPage.isFetching,\n//         followingInProgress:state.usersPage.followingInProgress\n//     }\n// }"],"sourceRoot":""}