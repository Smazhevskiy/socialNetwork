{"version":3,"sources":["utils/validate/validators.ts","components/common/formsControl/FormsControl.tsx","components/common/formsControl/FormsControl.module.css","pages/profile/MyPosts/MyPosts.module.css","pages/profile/ProfileInfo/ProfileInfo.module.css","pages/profile/MyPosts/Post/Post.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","pages/profile/ProfileInfo/ProfileStatus.tsx","pages/profile/ProfileInfo/ProfileInfo.tsx","pages/profile/MyPosts/Post/Post.tsx","pages/profile/MyPosts/AddPost.tsx","pages/profile/MyPosts/MyPosts.tsx","pages/profile/MyPosts/MyPostsContainer.ts","pages/profile/Profile.tsx","pages/profile/ProfileContainer.tsx"],"names":["required","value","undefined","maxLengthCreator","symbalLength","length","Textarea","input","meta","props","hasError","touched","error","className","styles","formControl","children","Input","module","exports","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","_s","_i","next","done","push","err","unsupportedIterableToArray","TypeError","ProfileStatus","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","type","onBlur","e","updateStatus","currentTarget","autoFocus","onChange","onKeyPress","key","onTouchStart","ProfileInfo","profile","classes","content","src","photos","small","userWithoutPhoto","alt","fullName","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJobDescription","Preloader","Post","post","avatar","message","like","likeCount","maxLengthCreator10","AddPost","React","memo","onSubmit","handleSubmit","Field","createPostArea","component","name","placeholder","validate","createPostBtn","DialogsReduxForm","reduxForm","form","MyPosts","postsElement","posts","map","p","id","createPost","createPostTitle","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","Number","this","match","params","history","setUserProfile","getUserStatus","updateUserStatus","Component","compose","authorizedUserId","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.bb67f5ee.chunk.js","sourcesContent":["\n\nexport const required = (value:string) => {\n  return   value? undefined : 'field is req'\n}\n\nexport const maxLengthCreator = (symbalLength:number) => {\n    return (value: string) => {\n        if (value.length > symbalLength) {\n            return `max length is ${symbalLength} symbols`\n        } else {\n            return undefined\n        }\n    }\n}\n","import React, {FC} from 'react'\nimport { WrappedFieldProps } from 'redux-form'\nimport styles from './FormsControl.module.css'\n\ninterface CustomFieldProps {\n    type?: string;\n}\n\n\nexport const Textarea:FC<WrappedFieldProps & CustomFieldProps > = ({input,meta,...props}) => {\n    const hasError = meta.touched && meta.error\n\n    return (\n        <div className={`${styles.formControl} + ${hasError ? styles.error : \"\"} `}>\n            <div>\n                <textarea {...input} {...props}/>\n            </div>\n            {hasError && <span>{meta.error}</span>}\n            {props.children}\n        </div>\n    )\n}\nexport const Input:FC<WrappedFieldProps & CustomFieldProps > = ({input,meta,...props}) => {\n    const hasError = meta.touched && meta.error\n\n    return (\n        <div className={`${styles.formControl} + ${hasError ? styles.error : \"\"} `}>\n            <div>\n                <input {...input} {...props}/>\n            </div>\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__2gvJ0\",\"error\":\"FormsControl_error__3qwFS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__1I5jP\",\"createPost\":\"MyPosts_createPost__2gifI\",\"createPostTitle\":\"MyPosts_createPostTitle__wdmaw\",\"createPostArea\":\"MyPosts_createPostArea__1yyUo\",\"createPostBtn\":\"MyPosts_createPostBtn__1xF5q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__3sl4Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__2jKTs\",\"avatar\":\"Post_avatar__sVTKg\",\"message\":\"Post_message__15MVK\",\"like\":\"Post_like__2r9_N\"};","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, {FC, useEffect, useState} from \"react\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport const ProfileStatus:FC<EditableSpanPropsType> = (props) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState('');\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const onDoubleClick = () => {\r\n        setEditMode(true)\r\n    }\r\n    const onBlur = (e: any) => {\r\n        setEditMode(false)\r\n        props.updateStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const onChange = (e: any) => {\r\n        setStatus(e.currentTarget.value)\r\n\r\n    }\r\n    const onEnter = (e: any) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            props.updateStatus(e.currentTarget.value)\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode\r\n                ? <span\r\n                    onDoubleClick={onDoubleClick}\r\n                    onTouchStart={onDoubleClick}>{!props.status ? 'hey' : props.status}</span>\r\n                : <input\r\n                    type=\"text\"\r\n                    onBlur={onBlur}\r\n                    value={status}\r\n                    autoFocus\r\n                    onChange={onChange}\r\n                    onKeyPress={onEnter}\r\n                />\r\n            }\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ProfileStatus","import React, {FC} from \"react\";\r\nimport classes from \"./ProfileInfo.module.css\"\r\nimport {Preloader} from \"../../../components/common/Preloader/Preloader\";\r\nimport {ProfilePropsType} from \"../Profile\";\r\nimport userWithoutPhoto from '../../../assets/imagies/icons8-user-male.svg'\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\n\r\nconst ProfileInfo: FC<ProfilePropsType> = ({profile ,status ,updateStatus}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    } else {\r\n        return (\r\n            <div>\r\n                <div className={classes.content}>\r\n                    <img src={profile.photos.small ? profile.photos.small : userWithoutPhoto} alt=\"\"/>\r\n\r\n                    <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n\r\n                    <div> {profile.fullName} </div>\r\n                    <div> {profile.aboutMe} </div>\r\n                    <ul>\r\n                        <li>{profile.contacts.facebook ? `Facebook: ${profile.contacts.facebook}`:''}</li>\r\n                        <li>{profile.contacts.website}</li>\r\n                        <li>{profile.contacts.vk}</li>\r\n                        <li>{profile.contacts.twitter}</li>\r\n                        <li>{profile.contacts.instagram}</li>\r\n                        <li>{profile.contacts.youtube}</li>\r\n                        <li>{profile.contacts.github}</li>\r\n                        <li>{profile.contacts.mainLink}</li>\r\n                    </ul>\r\n                    <div>{profile.lookingForAJobDescription}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default ProfileInfo","import React from \"react\";\nimport { postType } from \"../../../../redux/store\";\nimport classes from \"./Post.module.css\"\n\n\n\n\nconst Post : React.FC<postType> = (props) => {\n    return (\n        <div className={classes.post}>\n                <img className={classes.avatar}\n                     src=\"https://image.freepik.com/free-vector/cute-avocado-cartoon-icon_138676-1820.jpg\" alt=\"ss\"/>\n            <div className={classes.message}>\n                {props.message}\n            </div>\n\n            <div className={classes.like}>\n                <button>+</button>\n                {props.likeCount}</div>\n        </div>\n    )\n}\nexport default Post","import React, {FC} from \"react\";\nimport classes from \"./MyPosts.module.css\"\nimport {Field, InjectedFormProps} from \"redux-form\";\nimport {addPostExtendsFormDataType, addPostFormDataType} from \"./MyPosts\";\nimport {maxLengthCreator, required} from \"../../../utils/validate/validators\";\nimport {Textarea} from \"../../../components/common/formsControl/FormsControl\";\n\n\nconst maxLengthCreator10 = maxLengthCreator(10)\nexport const AddPost: FC<InjectedFormProps<addPostFormDataType> & addPostExtendsFormDataType> = React.memo( (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field className={classes.createPostArea}\n                   component={Textarea}\n                   name={'newPostText'}\n                   placeholder={'enter message'}\n                   validate={[required, maxLengthCreator10]}\n            />\n            <button className={classes.createPostBtn}>Create new Post</button>\n        </form>\n    )\n});\n","import React from \"react\";\nimport classes from \"./MyPosts.module.css\"\nimport Post from \"./Post/Post\";\nimport { reduxForm} from \"redux-form\";\nimport {MyPostPropsType} from \"./MyPostsContainer\";\nimport {AddPost} from \"./AddPost\";\n\nconst MyPosts: React.FC<MyPostPropsType> = (props) => {\n    let addNewPost = (values: addPostFormDataType) => {\n        props.addPost(values.newPostText)\n    }\n    let postsElement = props.posts.map(p => <Post id={p.id} message={p.message} likeCount={p.likeCount} key={p.id}/>)\n\n    return (\n        <div className={classes.posts}>\n            <div className={classes.createPost}>\n                <div className={classes.createPostTitle}>My posts</div>\n                <DialogsReduxForm onSubmit={addNewPost}/>\n            </div>\n            {postsElement}\n        </div>\n    )\n}\nexport type addPostFormDataType = {\n    newPostText: string\n}\nexport type addPostExtendsFormDataType = {}\nexport const DialogsReduxForm = reduxForm<addPostFormDataType, addPostExtendsFormDataType>({\n    form: 'dialogsAddMessageForm'\n})(AddPost)\nexport default MyPosts","import {postType} from \"../../../redux/store\";\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppRootStateType} from \"../../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\ntype MapStatePropsType = {\n    posts: postType[]\n}\ntype MapDispatchToProps = {\n    addPost: (newPostText:string) => void\n}\nexport type MyPostPropsType = MapStatePropsType & MapDispatchToProps\n\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\n    return {\n        posts: state.profilePage.posts,\n    }\n}\nconst mapDispatchProps = (dispatch: Dispatch): MapDispatchToProps => {\n    return {\n        addPost: (newPostText:string) => {\n            dispatch(addPostActionCreator(newPostText))\n        }\n    }\n}\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchProps)(MyPosts)\nexport default MyPostsContainer","import React from \"react\";\nimport classes from \"./Profile.module.css\"\n\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport {UserProfileType} from \"../../dal/api\";\n\n\nexport type ProfilePropsType = {\n    profile: null | UserProfileType\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst Profile: React.FC<ProfilePropsType> = React.memo(({profile, status, updateStatus}) => {\n    return (\n        <div className={classes.profile}>\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus}/>\n            <MyPostsContainer/>\n        </div>\n    )\n});\nexport default Profile","import React from 'react';\nimport Profile from \"./Profile\";\nimport {AppRootStateType} from \"../../redux/redux-store\";\nimport {getUserStatus, setUserProfile, updateUserStatus} from \"../../redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport {connect} from \"react-redux\";\nimport {compose} from 'redux';\nimport {UserProfileType} from \"../../dal/api\";\n\n\nexport type ProfileContainerPropsType = MapStatePropsType & MapDispatchToProps\ntype MapDispatchToProps = {\n    setUserProfile: (userId: number) => void\n    getUserStatus: (userid: number) => void\n    updateUserStatus: (status: string) => void\n}\ntype MapStatePropsType = {\n    profile: null | UserProfileType\n    status: string\n    authorizedUserId:number | null\n    isAuth:boolean\n    userId:number | null\n}\ntype PathParamsType = {\n    userId: string\n}\ntype propsType = ProfileContainerPropsType & RouteComponentProps<PathParamsType>\n\nclass ProfileContainer extends React.Component<propsType> {\n    componentDidMount() {\n        let userId:number|null = Number(this.props.match.params.userId)\n        if (!userId) {\n            userId = this.props.userId\n            if(!userId) {\n                this.props.history.push('/login')\n            }\n        }\n        if(userId) {\n            this.props.setUserProfile(userId)\n            this.props.getUserStatus(userId)\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Profile  {...this.props}\n                          profile={this.props.profile}\n                          status={this.props.status}\n                          updateStatus={this.props.updateUserStatus}\n                />\n            </div>\n        );\n    }\n}\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId:state.auth.userId,\n    isAuth:state.auth.isAuth,\n    userId:state.auth.userId\n})\n// 1st wrap - redirect hoc ( custom hoc)\n// 2nd wrap - with router hoc\n//3rd wrap - connect hoc\n\nexport default compose<React.ComponentType>(\n    connect(\n        mapStateToProps, {\n            setUserProfile, updateUserStatus, getUserStatus\n        }),\n    withRouter,\n)(ProfileContainer)"],"sourceRoot":""}